// (clock: 158223)
// (メモリの初期化)
@0000 00110000 11000000  // lui r0, #c0        // ヒストグラム領域の開始アドレス(上位8ビットを#c0に設定)
@0002 00001001 10000000  // lli r1, #80        // ヒストグラムのバケツ数（128個）
@0004 00110010 00000000  // lui r2, #00        // 書き込む値を0に初期化

@0006 00000010 00010000  // sw r2, (r0)        // 現在のバケツ(ヒストグラム用メモリ)に0を書き込む

// dec_bnez (original)
@0008 10001001 11111100  // bnez r1, #-4       // r1 != 0 ならループ継続（すべてのバケツが0になるまで）

@000a 00100000 00000010  // addi r0, #02       // 次のバケツ(アドレス)へ移動

// (画素値の集計)
@000c 00110000 10000000  // lui r0, #80        // 画像データの開始アドレス(上位8ビットを#80に設定)
@000e 00110001 11000000  // lui r1, #c0        // ヒストグラム領域の開始アドレス(上位8ビットを#c0に設定)
@0010 00110010 00100000  // lui r2, #20        // ループカウンタ（画像の行数128*128/2）

// ループ
@0012 00000011 00010001  // lw r3, (r0)       // 画像データから2画素読み込み

// even_lower_mov (original)
@0014 00000100 01101110  // mov r4, r3

// even_upper_mov (original)
@0016 00000011 01101111  // mov r3, r3

//上位ビット処理
@0018 00110101 11000000  // lui r5, #c0         // 基底アドレス(0xC000)をコピー
@001a 00000101 01100100  // add r5, r3         // 基底アドレス + 画素値(バケットのオフセット計算)

// lw_inc (original)
@001c 00000110 10110101  // lw_inc r6, (r5)        // 現在のヒストグラム値を読み込み

@001e 00000110 10110000  // sw r6, (r5)        // ヒストグラムに書き戻し

//下位ビット処理
@0020 00110101 11000000  // lui r5, #c0         // 基底アドレス(0xC000)をコピー
@0022 00000101 10000100  // add r5, r4         // 基底アドレス + 画素値(バケットのオフセット計算)

// lw_inc (original)
@0024 00000110 10110101  // lw_inc r6, (r5)        // 現在のヒストグラム値を読み込み

@0026 00000110 10110000  // sw r6, (r5)        // ヒストグラムに書き戻し

//dec_bnez (original)
@0028 10001010 11101000  // bnez r2, #-18      // 列カウンタが0でなければinner loopに戻る

@002a 00100000 00000010  // addi r0, #2

// (集計結果の正規化)
@002c 00110000 11000000  // lui r0, #c0        // ヒストグラムを読み込むポインタ
@002e 00110001 11000000  // lui r1, #c0        // ヒストグラムを格納し直すポインタ
@0030 00001010 10000000  // lli r2, #80        // バケツ数(128)

// ループ開始（各バケツを正規化）
@0032 00000011 00010001  // lw r3, (r0)       // バケツ値を読み込み

//sr2 (original)
@0034 00000011 01101101  // sr r3, r3         // 右シフト2回：値を1/4に

@0036 00000011 00110010  // sbu r3, (r1)      // 正規化した値を格納(1バイト)
@0038 00100001 00000001  // addi r1, #01      // 次のバケツアドレスへ(1バイト進む)

// dec_bnez (original)
@003a 10001010 11110110  // bnez r2, #-a      // 全バケツ分繰り返す

@003c 00100000 00000010  // addi r0, #02      // 元のヒストグラムも2バイト刻みで次の値へ


// (ヒストグラムの描写)
@003e 00110000 11000000  // lui r0, #c0     // 正規化済みの値の先頭アドレス
@0040 00110001 11111111  // lui r1, #ff
@0042 00100001 01111111  // addi r1, #7f
@0044 00100001 00000001  // addi r1, #1     // r1 = 0xff80 （ヒストグラムの左下）
@0046 00001010 10000000  // lli r2, #80     // ループカウンタ(カラム数)

// draw_outer_loop:
@0048 00000100 00010011  // lbu r4, (r0)    // バケツ値(ヒストグラムの高さ)
@004a 00001101 10000000  // lli r5, #80     // 全体高さ(128)とするカウンタ
@004c 00000101 10000101  // sub r5, r4      // r5 = 128 - バケツ値 → 白黒分ける境界位置
@004e 00000110 00100001  // mov r6, r1      // r6 に現在の描画アドレスを退避

// fill_white_start
@0050 10000100 00001000  // beqz r4, #8     // バケツ値0ならすぐにfill_black_startへ分岐
@0052 00001011 11111111  // lli r3, #ff     // 白(255)を描画する設定に変更

// fill_white_loop:
@0054 00000011 00110010  // sbu r3, (r1)    // 白を書き込み

// dec_bnez (original)
@0056 10001100 11111100  // bnez r4, #-4    // バケツ値分だけ白を塗る

@0058 00100001 10000000  // addi r1, #-80   // 上へ移動（縦に描画）

// fill_black_start:
@005a 00001011 00000000  // lli r3, #00     // 黒(0)を描画する設定に変更

// fill_black_loop:
@005c 00000011 00110010  // sbu r3, (r1)    // 黒を書き込み

// dec_bnez (original)
@005e 10001101 11111100  // bnez r5, #-4    // fill_black_loop

@0060 00100001 10000000  // addi r1, #-80   // さらに上へ移動

// next_column:
@0062 00000001 11000001  // mov r1, r6      // 描画アドレスを列基底に戻す
@0064 00100001 00000001  // addi r1, #1    // 次の列へ進む

// dec_bnez (original)
@0066 10001010 11100000  // bnez r2, #-20   // まだ列が残っていればdraw_outer_loop先頭へ

@0068 00100000 00000001  // addi r0, #1    // ヒストグラムの次バケツへ
@006a 00000000 00000000  // nop
@006c 00000000 00000000  // nop

